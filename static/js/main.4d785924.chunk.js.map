{"version":3,"sources":["Header/Header.js","TaskCount/TaskCount.js","Tasks/Tasks.js","Toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","TaskCount","props","className","count","Task","text","urgent","moment","dueDate","format","completed","type","name","onClick","completeTaskFunc","deleteTaskFunc","Toolbar","useState","taskText","setTaskText","isEnabled","length","date","setDate","checked","setChecked","placeholder","value","onChange","event","target","htmlFor","addNewTaskFunc","disabled","App","tasks","setTasks","useEffect","axios","get","then","response","console","log","data","catch","err","deleteTask","delete","filteredTasks","filter","task","TaskID","completeTask","put","Completed","newTask","map","post","Urgent","DueDate","newTasks","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4d785924.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\n\nfunction Header() {\n    return (\n        <header>\n            <h1 id=\"main title\"> ToDo List App</h1>\n            <br />\n            <h4> Keeping you organised!</h4>\n\n\n        </header>\n\n    );\n}\n\n\nexport default Header;","import React from \"react\";\n\nfunction TaskCount(props) {\n    return <h2 className=\"floating-bottom\"><span className=\"badge badge-secondary\"><p>{props.count}</p></span> Tasks Left</h2>\n\n}\n\nexport default TaskCount;\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"./Tasks.css\";\n\nfunction Task(props) {\n\n    const handleDeleteClick = () => {\n        props.deleteTaskFunc(props.id);\n    }\n\n    const handleCompleteClick = () => {\n        props.completeTaskFunc(props.id);\n    }\n\n    return (\n        <div className=\"row taskRow\">\n            <div className=\"col -12 col md-4\">\n                {props.text}\n            </div>\n            <div className=\"col -4 col md-3\">\n                {props.urgent === 1 ? \"URGENT\" : \" \"}\n            </div>\n            <div className=\"col -4 col md-3\">\n                {moment(props.dueDate).format(\"Do MMM YYYY\")}\n            </div>\n            <div className=\"col -4 col md-2\">\n                {props.completed === 0 && <input type=\"checkbox\" className=\"largerCheckbox\" name=\"checkBox2\" onClick={handleCompleteClick} />}\n                {props.completed === 1 && <button className=\"btn btn-secondary\" type=\"button\" id=\"button-addon2\" onClick={handleDeleteClick}>delete</button>}\n            </div>\n        </div>\n\n\n    );\n}\n\n\nexport default Task;","import React, { useState } from 'react';\n\n\nfunction Toolbar(props) {\n    const [taskText, setTaskText] = useState(\"\");\n    const isEnabled = taskText.length > 0;\n    const [date, setDate] = useState(\"\"); // TODO: use moment to set the initial date to todays date\n    const [checked, setChecked] = useState(false);\n\n    const handleTextChange = (event) => {\n        setTaskText(event.target.value);\n    }\n\n    const handleDateChange = (event) => {\n        setDate(event.target.value)\n\n    }\n\n    const handleUrgentChange = (event) => {\n        setChecked(event.target.checked);\n    }\n\n    const handleAddTask = () => {\n        props.addNewTaskFunc(taskText, checked, date);\n        setTaskText(\"\");\n        setDate(\"\");\n        setChecked(false);\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row mb-3\">\n                <div className=\"col -5\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Create Task\" value={taskText} onChange={handleTextChange} />\n                </div>\n                <div className=\"col -1\">\n                    <label className=\"form-check-label\" htmlFor=\"urgentCheck1\">Urgent?</label><br />\n                    <input type=\"checkbox\" className=\"form-check-input\" id=\"urgemtCheck1\" checked={checked} onChange={handleUrgentChange} />\n                </div>\n                <div className=\"col -3\">\n                    <input type=\"date\" className=\"form-control\" value={date} onChange={handleDateChange} />\n                </div>\n                <div className=\"col -1\">\n                    <button className=\"btn btn-secondary\" type=\"button\" id=\"button-addon2\" onClick={handleAddTask} disabled={!isEnabled} >Add Task{props.count}</button>\n                </div>\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default Toolbar;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport TaskCount from \"./TaskCount/TaskCount\";\nimport Tasks from \"./Tasks/Tasks\";\nimport Toolbar from \"./Toolbar/Toolbar\";\n\n\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    axios.get(\"https://mgen6vrtp0.execute-api.eu-west-1.amazonaws.com/dev/tasks\")\n    .then(response => {\n      console.log(\"success\", response);\n      setTasks(response.data);\n    })\n    .catch(err => {\n      console.log(\"Error\",err)\n    })\n  }, [])\n\n\n  \n// fetch tasks from back end  \n  const deleteTask = (id => {\n    // issue delete request to my api from postman\n    // if resoves then filter my tasks on the frontend to remove the task with given id\n    axios.delete(`https://mgen6vrtp0.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`)\n    .then(response => {\n      const filteredTasks = tasks.filter(task => {\n        console.log(\"successfully removed task\", response)\n        return task.TaskID !== id;\n  \n      })\n  \n      setTasks(filteredTasks);\n    })\n    .catch(err => {\n      console.log(\"API error\", err )\n    })\n  })\n    \n\n  const completeTask = (id) => {\n\n    axios.put(`https://mgen6vrtp0.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`,{\n      Completed: true\n    })\n    .then((response) => {\n      const newTask = tasks.map(task => {\n        if (task.TaskID === id) {\n          console.log(`Updated task ${id}`, response)\n          task.Completed = 1;\n        }\n        return task;\n  \n      });\n  \n      setTasks(newTask);\n    })\n    .catch((err) => {\n      console.log(\"Error updating completed\")\n    })\n  }\n\n  const addNewTask = (text, urgent, date) => {\n\n  axios.post(\"https://mgen6vrtp0.execute-api.eu-west-1.amazonaws.com/dev/tasks\", {\n    Task: text,\n    Urgent: urgent,\n    DueDate: date,\n  })\n    .then(response => {\n      const newTask = response.date\n      const newTasks = [...tasks, newTask];\n    console.log(newTasks);\n      setTasks(newTasks);\n    })\n  \n    .catch(err => {\n      console.log(\"error creating task\", err)\n    })\n\n  } \n\n \n  return (  \n    <div className=\"App\">\n      <Header />\n      <br />\n      <div>\n        <br />\n        <Toolbar addNewTaskFunc={addNewTask} />\n        <div className=\"container\">\n\n          {tasks.map(task => {\n            return (\n              <Tasks \n              key={task.TaskID} \n              deleteTaskFunc={deleteTask} \n              completeTaskFunc={completeTask} \n              text={task.Task} \n              urgent={task.Urgent} \n              dueDate={task.DueDate} \n              completed={task.Completed} \n              id={task.TaskID}/>\n            );\n          })}\n        </div>\n\n      </div>\n\n\n\n      <TaskCount count={tasks.length} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}